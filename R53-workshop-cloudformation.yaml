AWSTemplateFormatVersion: "2010-09-09"
Description: My Test
Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "test Alexis"
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"

Resources:


  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Ref 'VPCName'
          
  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-'
              - ${AWS::Region}a

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-'
              - ${AWS::Region}b

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-IGW'

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-route-table'

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"

  Xface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet0
      Description: Interface
      GroupSet: 
      - !Ref InstanceSecurityGroup
      SourceDestCheck: true
      Tags:
        -
          Key: Network
          Value: Control

  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref Xface
          DeviceIndex: 0
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref rInstanceProfile

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  IPAddress:
    Type: AWS::EC2::EIP
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'Ec2Instance'
      EIP: !Ref 'IPAddress'


  rRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  rInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: !Sub '/'
      Roles:
        - !Ref rRole
  
  myCustomerGateway: 
    Type: AWS::EC2::CustomerGateway
    Properties: 
        Type: ipsec.1
        BgpAsn: 65534
        IpAddress: !Ref 'IPAddress'

  myVPNGateway: 
   Type: AWS::EC2::VPNGateway
   Properties: 
      Type: ipsec.1


  PreShared1:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for BGP Session node1'
      GenerateSecretString:
        SecretStringTemplate: '{"fake": "fake"}'
        GenerateStringKey: 'preshared'
        PasswordLength: 16
        ExcludeCharacters: '"@/\0'
        ExcludePunctuation: True

  PreShared2:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for BGP Session node1'
      GenerateSecretString:
        SecretStringTemplate: '{"fake": "fake"}'
        GenerateStringKey: 'preshared'
        PasswordLength: 16
        ExcludeCharacters: '"@/\0'
        ExcludePunctuation: True

  myVPNConnection: 
    Type: AWS::EC2::VPNConnection
    Properties: 
      Type: ipsec.1
      StaticRoutesOnly: false
      CustomerGatewayId: 
        !Ref myCustomerGateway
      VpnGatewayId: 
        !Ref myVPNGateway
      VpnTunnelOptionsSpecifications: 
        - PreSharedKey: !Join ['', ['{{resolve:secretsmanager:', !Ref PreShared1, ':SecretString:preshared}}' ]]
        - PreSharedKey: !Join ['', ['{{resolve:secretsmanager:', !Ref PreShared2, ':SecretString:preshared}}' ]]

  AttachVpnGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: 
        !Ref VPC
      VpnGatewayId: 
        !Ref myVPNGateway

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'Ec2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [Ec2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [Ec2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [Ec2Instance, PublicIp]          
  PrivateDnsName:
    Description: Private DNSName of the newly created EC2 instance
    Value: !GetAtt [Ec2Instance, PrivateDnsName]
  PrivateIp:
    Description: Private IP address of the newly created EC2 instance
    Value: !GetAtt [Ec2Instance, PrivateIp]      
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref 'IPAddress'
  EIP:
    Description: IP address of the EIP
    Value: !GetAtt [IPAddress,AllocationId]
  MyEIPAddress:
    Description: IP address of the EIP
    Value: !Ref IPAddress

